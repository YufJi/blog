(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{440:function(e,n,r){"use strict";r.r(n);var t=r(49),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Babel")]),e._v(" "),r("p",[e._v("定义")]),e._v(" "),r("p",[e._v("Babel 是我们知道的将 ES6、ES7等代码转译为 ES5 代码且能安全稳定运行最好的工具\n同时它允许开发者开发插件，能够在编译时期转换 JavaScript 的结构。\nBabel概述")]),e._v(" "),r("p",[e._v("我们需要知道 3 个 Babel 处理流程中的重要工具；\n解析\nBabylon是一个解析器，它可以将javascript字符串，转化为更加友好的表现形式，称之为抽象语法树；\n在解析过程中有两个阶段：词法分析和语法分析，\n词法分析阶段：字符串形式的代码转换为令牌（tokens）流,令牌类似于AST中的节点；\n语法分析阶段：把一个令牌流转化为AST的形式，同时这个阶段会把令牌中的信息转化为AST的表述结构\n转换\nbabel-traverse 模块允许你浏览、分析和修改抽象语法树（AST Abstract Syntax Tree）\nBabel接收解析得到的AST并通过babel-traverse对其进行深度优先遍历，在此过程中对节点进行添加、更新及移除操作。\n生成\nbabel-generator 模块用来将转换后的抽象语法树（AST Abstract Syntax Tree）转化为Javascript 字符串\n将经过转换的AST通过babel-generator再转换为js代码，过程及时深度遍历整个AST,然后构建转换后的代码字符串。\nBabel 中重要的对象Vistor")]),e._v(" "),r("p",[e._v("babel 在处理一个节点时，是以访问者的形式获取节点的信息，并进行相关的操作，这种操作是通过visitor对象实现的。")]),e._v(" "),r("p",[e._v("在 visitor 中定义了处理不同节点的函数。")]),e._v(" "),r("p",[e._v("visitor: {\nProgram: {\nenter(path, state) {\nconsole.log('start processing this module...');\n},\nexit(path, state) {\nconsole.log('end processing this module!');\n}\n},\nImportDeclaration:{\nenter(path, state) {\nconsole.log('start processing ImportDeclaration...');\n// do something\n},\nexit(path, state) {\nconsole.log('end processing ImportDeclaration!');\n// do something\n}\n}\n}\nAST")]),e._v(" "),r("p",[e._v("定义")]),e._v(" "),r("p",[e._v("AST (Abstract Syntax Tree)是抽象语法树英文的缩写，AST语法树每一层都拥有相同的结构，这样的每一层结构也被叫做节点（Node）。\nAST 是源代码的抽象语法结构树状表现形式，Webpack、ESLint、JSX、TypeScript 的编译和模块化规则之间的转化都是通过 AST 来实现对代码的检查、分析以及编译等操作。\n一个 AST 可以由单一的节点或是成百上千个节点构成。 它们组合在一起可以描述用于静态分析的程序语法。\nJavascript 语法的AST（抽象语法树）")]),e._v(" "),r("p",[e._v("javascript 语句要想知道抽象语法树之后的代码是什么，里面的字段都代表什么含义以及遍历的规则，可以通过javascript语法转换AST工具来实现javascript语法的在线转换；\n例如：")]),e._v(" "),r("p",[e._v("esprima、estraverse 和 escodegen 模块是操作 AST 的三个重要模块，也是实现 babel 的核心依赖。")]),e._v(" "),r("p",[e._v("例如：语法转换插件需要借助 babel-core 和 babel-types 两个模块,就是依赖 esprima、estraverse 和 escodegen")]),e._v(" "),r("p",[e._v("转换的抽象语法树：var answer= 6 * 7")]),e._v(" "),r("p",[e._v("每一个含有type属性的对象，我们称之为节点，修改是指获取对应的类型并修改改节点的属性即可；")]),e._v(" "),r("p",[e._v('{\n"type": "Program",\n"body": [\n{\n"type": "VariableDeclaration",\n"declarations": [\n{\n"type": "VariableDeclarator",\n"id": {\n"type": "Identifier",\n"name": "answer"\n},\n"init": {\n"type": "BinaryExpression",\n"operator": "*",\n"left": {\n"type": "Literal",\n"value": 6,\n"raw": "6"\n},\n"right": {\n"type": "Literal",\n"value": 7,\n"raw": "7"\n}\n}\n}\n],\n"kind": "var"\n}\n],\n"sourceType": "script"\n}\nestraverse 遍历和修改AST')]),e._v(" "),r("p",[e._v("查看遍历过程：")]),e._v(" "),r("p",[e._v('const esprima = require("esprima");\nconst estraverse = require("estraverse");')]),e._v(" "),r("p",[e._v('let code = "var answer=6 * 7";')]),e._v(" "),r("p",[e._v('// 遍历语法树\nestraverse.traverse(esprima.parseScript(code), {\nenter(node) {\nconsole.log("enter", node.type);\n},\nleave(node) {\nconsole.log("leave", node.type);\n}\n});\n打印结果如下：')]),e._v(" "),r("p",[e._v("以上代码通过estraverse模块的traverse方法，将esprima模块装换的AST进行了遍历。\n通过打印type属性，可以知道深度遍历AST就是遍历每一层的type属性，所以遍历会分为两个阶段，进入阶段和离开阶段，在traverse方法中分别用参数enter和leave两个函数监听；\nescodegen 将 AST 转换成 JS")]),e._v(" "),r("p",[e._v('const esprima = require("esprima");\nconst estraverse = require("estraverse");\nconst escodegen= require("escodegen");')]),e._v(" "),r("p",[e._v('let code = "var answer=6 * 7";')]),e._v(" "),r("p",[e._v("let tree=esprima.parseScript(code); // 生成语法树\n// 遍历语法树\nestraverse.traverse(tree, {\nenter(node) {\nconsole.log(\"enter\", node.type);\n// 修改变量名\nif(node.type==='VariableDeclarator'){\nnode.id.name='result';\n}\n},\nleave(node) {\nconsole.log(\"leave\", node.type);\n}\n});")]),e._v(" "),r("p",[e._v("// 编译修改后的语法树；\nlet compileTreeJS=escodegen.generate(tree);\nconsole.log(compileTreeJS);\n打印结果如下 ：\nvar result=6 * 7")]),e._v(" "),r("p",[e._v("通过工具了解抽象语法树在 JavaScript 中的体现以及在 NodeJS 中用于生成、遍历和修改 AST 抽象语法树的核心依赖；让我们有了更加深刻地认识；")])])}),[],!1,null,null,null);n.default=a.exports}}]);